4.6
4.6.1
	그림 4.17의 경우 i형식 명령어의 연산에 사용하는 15-0비트를 ALU유닛에서 offset과 덧셈연산 후 메모리 주소의 연산에 사용하고있습니다.
	i형식 명령어인 addi와 같은 명령어는 RegDst:0, Branch:0, MemRead:X, MemtoReg:0, ALUOp:00, MemWrite:X, ALUSrc:1, RegWrite:1로 설정하면 잘 작동한다.
	하지만, 논리연산의 경우 부호를 유지하기 위해 최상위 비트값을 확장하는 sign-sxtension을 할 경우 andi와 같은 논리연산이 불가능하다.
	따라서 i형식 명령어의 논리연산의 경우 zero-extension유닛의 추가가 필요하다.
	Insrtuction16비트를 사용하는 것은 동일하기에, Sign-extend유닛의 직전 라인에서 분기해 Zero-extension유닛을 추가한다.
	따라서 부호확장과 0확장을 모두 진행한 뒤, Mux유닛을 두 확장유닛 뒤에 배치한 뒤, Control유닛에서 ItypeLogic(임시 이름)과 같은 제어신호를 보내게 해,
	연산의 종류에 따라 부호확장과 0확장값을 취사선택해 ALUSrc신호와 이어진 Mux유닛에 이어주면 i형식 논리연산도 수행 가능하다.
	즉, 논리연산을 위한 Zero-extend유닛, Mux유닛, 새로운 제어 신호가 추가로 필요하다.

4.6.2
	1번 문제의 해석에 기입한 대로 RegDst:0, Branch:0, MemRead:X, MemtoReg:0, ALUOp:00, MemWrite:X, ALUSrc:1, RegWrite:1신호를 생성한다.
	MemRead:X와 MemWrite가 Don't care인 이유는 MemtoReg값을 0으로 설정해 두어, Data memory유닛에서 어떠한 연산을 해도 그 값이 이용되는 일이 없기 때문이다.

4.16
4.16.1
	파이프라인 프로세서의 경우 클럭 사이클 시간은 가장 긴 시간을 갖는 데이터패스 지연시간과 같기 때문에 ID단계의 지연시간인 350ps이다.
	파이프라인되지 않은 프로세서의 경우 IF+ID+EX+MEM+WB지연시간을 모두 더한 값과 같기 때문에 250+350+150+300+200 = 1250ps이다.

4.16.2
	파이프